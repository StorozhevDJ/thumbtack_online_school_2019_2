
# Preamble
# Scheme of connection is WORKSTATION <-> ROUTER <-> ISP <-> ROUTER (IP: 91.90.39.86) <-> GATEWAY <-> SERVER
# WORKSTATION - from other local net via internet (SSH Port forwarding 2222->22)
# GATEWAY IP: 192.168.1.100
# SERVER IP: 192.168.1.87



######################################################
# SSH

# Запустить две виртуальные машины, созданные ранее (будем называть их WORKSTATION и SERVER), зайти по ssh из WORKSTATION на SERVER. Сгенерировать пару ключей и настроить по ним доступ. Приватный ключ защитить паролем. После настройки доступа по ключам отключите доступ по паролю.
# Эту часть задания можно считать выполненной, если у вас настроен доступ только по ключам.

ssh denis@192.168.1.87
# Generate SSH keys
ssh-keygen
# Copy public key to "server"
cat ~/.ssh/id_rsa.pub | ssh 192.168.1.87 "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"
# Or
ssh-copy-id denis@192.168.1.87

# Connect to server. Enter passphrase for key
ssh 192.168.1.87

# Edit ssh config
sudo vi /etc/ssh/sshd_config
# Disable Password Authentication. Save and exit.
PasswordAuthentication no



#####################################################
# Установка сервиса на удаленной машине

# Установить на сервере java. Скопировать на SERVER приложение webHelloWorld (jar файл) и запустить. Выполнить в двух вариантах, с помощью команды screen и в виде службы systemd. Запустить journalctl для просмотра логов. 
# Эту часть задания можно считать выполненной, если по адресу http://127.0.0.1:4567/hello в браузере придет ответ, а в логах journalctl будет информация о запросах

# Start WebHelloWorld in screen mode
screen -S "My HelloWorld Service"
java -jar WebHelloWorld.jar

    [Thread-0] INFO org.eclipse.jetty.util.log - Logging initialized @1373ms to org.eclipse.jetty.util.log.Slf4jLog
    [Thread-0] INFO spark.embeddedserver.jetty.EmbeddedJettyServer - == Spark has ignited ...
    [Thread-0] INFO spark.embeddedserver.jetty.EmbeddedJettyServer - >> Listening on 0.0.0.0:4567
    [Thread-0] INFO org.eclipse.jetty.server.Server - jetty-9.4.z-SNAPSHOT
    [Thread-0] INFO org.eclipse.jetty.server.session - DefaultSessionIdManager workerName=node0
    [Thread-0] INFO org.eclipse.jetty.server.session - No SessionScavenger set, using defaults
    [Thread-0] INFO org.eclipse.jetty.server.session - Scavenging every 600000ms
    [Thread-0] INFO org.eclipse.jetty.server.AbstractConnector - Started ServerConnector@22cbf7{HTTP/1.1,[http/1.1]}{0.0.0.0:4567}
    [Thread-0] INFO org.eclipse.jetty.server.Server - Started @2106ms
    [qtp32593652-9] INFO spark.http.matching.MatcherFilter - The requested route [/] has not been mapped in Spark for Accept: [text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3]
    [qtp32593652-13] INFO spark.http.matching.MatcherFilter - The requested route [/favicon.ico] has not been mapped in Spark for Accept: [image/webp,image/apng,image/*,*/*;q=0.8]
    [qtp32593652-10] INFO net.thumbtack.web.helloworld.HelloWorld - Request received from 192.168.1.100

Ctrl+d

# Send GET reques
# http://192.168.1.87:4567/hello -> "Hello World"

#Create service
sudo mkdir /opt/HelloWorldServer/
sudo cp WebHelloWorld.jar /opt/HelloWorldServer/
sudo nano /etc/systemd/system/helloworld.service
# Add and save text:
"[Unit]
Description=Helloworld service
[Service]
Type=simple
User=denis
ExecStart=/usr/lib/jvm/java-8-openjdk-armhf/bin/java -jar /opt/HelloWorldServer/WebHelloWorld.jar
ExecStop=/bin/kill -15 $MAINPID

[Install]
WantedBy=multi-user.target"

sudo systemctl daemon-reload
sudo systemctl enable helloworld.service
sudo systemctl status helloworld

    * helloworld.service - Helloworld service
    Loaded: loaded (/etc/systemd/system/helloworld.service; enabled; vendor preset: enabled)
    Active: failed (Result: exit-code) since Mon 2020-02-03 21:41:02 UTC; 1min 9s ago
    Process: 3788 ExecStop=/bin/kill -15 $MAINPID (code=exited, status=0/SUCCESS)
    Process: 3787 ExecStart=/usr/lib/jvm/java-8-openjdk-armhf/bin/java -jar /opt/HelloWorldServer/WebHelloWorld2.jar (code=exited, status=1/FAILURE)
    Main PID: 3787 (code=exited, status=1/FAILURE)

    Feb 03 21:41:01 orangepipcplus systemd[1]: Started Helloworld service.
    Feb 03 21:41:02 orangepipcplus systemd[1]: helloworld.service: Main process exited, code=exited, status=1/FAILURE
    Feb 03 21:41:02 orangepipcplus systemd[1]: helloworld.service: Unit entered failed state.
    Feb 03 21:41:02 orangepipcplus systemd[1]: helloworld.service: Failed with result 'exit-code'.

sudo journalctl -u helloworld.service
	Feb 03 17:47:18 orangepipcplus systemd[1]: Started Helloworld service.
	Feb 03 17:47:21 orangepipcplus systemd[1]: helloworld.service: Main process exited, code=exited, status=1/FAILURE
	Feb 03 17:47:21 orangepipcplus systemd[1]: helloworld.service: Unit entered failed state.
	Feb 03 17:47:21 orangepipcplus systemd[1]: helloworld.service: Failed with result 'exit-code'.


##############################################################
# Сетевые утилиты. 

# Запустить WebHelloWorld и проанализировать запросы и ответы с помощью tcpdump  и ngrep.
screen -S "My HelloWorld Service"
java -jar WebHelloWorld.jar

sudo ngrep -d any -W byline port 4567
	interface: any
	filter: (ip or ip6) and ( port 4567 )
	####
	T 192.168.1.100:40742 -> 192.168.1.87:4567 [AP]
	GET /hello HTTP/1.1.
	Host: 192.168.1.87:4567.
	Connection: keep-alive.
	Cache-Control: max-age=0.
	Upgrade-Insecure-Requests: 1.
	User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36 OPR/64.0.3417.73.
	Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3.
	Accept-Encoding: gzip, deflate.
	Accept-Language: ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7.
	.

	##
	T 192.168.1.87:4567 -> 192.168.1.100:40742 [AP]
	HTTP/1.1 200 OK.
	Date: Tue, 04 Feb 2020 16:25:57 GMT.
	Content-Type: text/html;charset=utf-8.
	Transfer-Encoding: chunked.
	Server: Jetty(9.4.z-SNAPSHOT).
	.
	B.
	Hello World
	#
	T 192.168.1.87:4567 -> 192.168.1.100:40742 [AP]
	.
	0.

# При выполнения запроса к WebHelloWorld.jar на порт 4567 отображаются принятый и переданный пакеты с адресами и HTTP заголовками для указанного порта

sudo tcpdump -v -i wlan0 port 4567
	tcpdump: listening on wlan0, link-type EN10MB (Ethernet), capture size 262144 bytes
	21:34:01.125739 IP (tos 0x0, ttl 64, id 3522, offset 0, flags [DF], proto TCP (6), length 60)
		192.168.1.100.42956 > orangepipcplus.4567: Flags [S], cksum 0xc9af (correct), seq 518427388, win 29200, options [mss 1460,sackOK,TS val 1235014417 ecr 0,nop,wscale 7], length 0
	21:34:01.128658 IP (tos 0x0, ttl 64, id 3523, offset 0, flags [DF], proto TCP (6), length 52)
		192.168.1.100.42956 > orangepipcplus.4567: Flags [.], cksum 0x9153 (correct), ack 1, win 229, options [nop,nop,TS val 1235014421 ecr 780510], length 0
	21:34:01.130503 IP (tos 0x0, ttl 64, id 3524, offset 0, flags [DF], proto TCP (6), length 530)
		192.168.1.100.42956 > orangepipcplus.4567: Flags [P.], cksum 0xf932 (correct), seq 1:479, ack 1, win 229, options [nop,nop,TS val 1235014422 ecr 780510], length 478
	21:34:01.157571 IP (tos 0x0, ttl 64, id 39337, offset 0, flags [DF], proto TCP (6), length 220)
		orangepipcplus.4567 > 192.168.1.100.42956: Flags [P.], cksum 0xe8fc (correct), seq 1:169, ack 479, win 122, options [nop,nop,TS val 780513 ecr 1235014422], length 168
	21:34:01.158759 IP (tos 0x0, ttl 64, id 39338, offset 0, flags [DF], proto TCP (6), length 59)
		orangepipcplus.4567 > 192.168.1.100.42956: Flags [P.], cksum 0x3e01 (correct), seq 169:176, ack 479, win 122, options [nop,nop,TS val 780513 ecr 1235014422], length 7

# отображаются адреса, длинны и параметры пакетов на более низком уровне, чем ngrep

# Установить web сервер nginx (без Docker), создать простую страницу, содержащую изображение, get и post формы,  файл для скачивания, форму file upload, установку cookie (например, средствами JS). Проанализировать запросы и ответы для всех этих вариантов.
sudo apt install nginx-core
# Создана HTML страница index.html по адресу http://192.168.1.87/ttschool/. Файл для скачивания file2.txt и изображениеimg.png
sudo ngrep -d any -W byline port 80 > test_http.txt
sudo tcpdump -v -i wlan0 port 80 > tcpdump_html.log

# 1. Получена HTML страница. Автоматически загружен файл с картинкой. Установлен cookie.
# 2. Загружен файл file2.txt
# 3. Отправлен POST запрос
# 4. Послан на сервер файл.



######################################################################
# Графические клиенты, Iptables, ssh туннель

# Установить на сервере MySql (без Docker) или postgreSQL.  На машине WORKSTATION запустить графический клиент (MySql Workbench или DBeaver) и проверить доступ. При работе с виртуальной машиной из Windows можно воспользоваться xming.
# Средствами iptables закрыть доступ (закрыть на сервере порт 3306 для MySql или 5432 для Postgres), проверить, что доступа нет. 
# Настроить ssh туннель для проброса порта  БД с сервера на WORKSTATION.

# Connect to server and run mysql-workbench
ssh -X 192.168.1.87 mysql-workbench
# MySQL Workbench is started

# Add iptables rules for MySQL (Allow only for localhost)
sudo iptables -A INPUT -p tcp --dport 3306 -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 3306 -j DROP
# View opened port 3306 from local net
nmap -p 3306 192.168.1.100
	Nmap scan report for 192.168.1.100
	Host is up (0.0050s latency).
	PORT     STATE    SERVICE
	3306/tcp filtered mysql
# The Port is closed for local net, MySQL Workbench is not connecting from GATEWAY

# Start SSH tunel for 3306
ssh -L 3306:127.0.0.1:3306 denis@192.168.1.87
# MySQL Workbench successfully connected to port 3306



#######################################################################
# * Проброс авторизации и создание туннеля через промежуточный узел

# В этом задании нужно смоделировать работу с production сервером, находящимся в защищенной сети. Для выполнения нужно создать и запустить три виртуальные машины, связанные сетью между собой (если базовая система - Linux, то достаточно две дополнительные виртуалки). Будем условно называть их
# WORKSTATION - соответствует рабочей машине разработчика
# GATEWAY - сервер для входа в защищенную сеть
# SERVER  - production сервер, находящийся в защищенной сети
# Для удобства можно написать эти имена в файлах /etc/hostname на каждой машине соответственно и перезагрузить.
# Сгенерировать пару ключей. Приватный ключ выложить на WORKSTATION, публичный - на GATEWAY и SERVER.
# Средствами iptables на машине SERVER закрыть SSH (порт 22) для всех входящих запросов кроме тех, которые пришли с GATEWAY.
# С помощью ssh-agent настроить доступ с WORKSTATION на SERVER через промежуточный сервер GATEWAY (проброс авторизации). Далее вся работа с сервером происходит только через это соединение.
# Установить на сервере MySql (без Docker), средствами iptables закрыть к нему доступ (закрыть порт 3306), проверить, что доступа нет. Настроить ssh туннель для доступа с WORKSTATION через GATEWAY. Запустить графический клиент (MySql Workbench или DBeaver) и проверить доступ. 

# Copy open key to GATEWAY and SERVER. Then
eval $(ssh-agent -s) && ssh-add ~/.ssh/id_rsa
# Connect  via tunnel
ssh -A -tt 91.90.39.86 -p 2222 ssh 192.168.1.87
# enter passphrase

# Add iptables rules for MySQL (Allow only for localhost) (was before)
sudo iptables -A INPUT -p tcp --dport 3306 -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 3306 -j DROP
# Add iptables rules for SSH (Allow only for local net and localhost)
sudo iptables -A INPUT -p tcp --dport 22 -s 192.168.0.0/16 -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 22 -s 127.0.0.0/8 -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 22 -j DROP
sudo iptables-save

# iptables status
iptables -L -n -v
	Chain INPUT (policy ACCEPT 1131 packets, 176K bytes)
	pkts bytes target     prot opt in     out     source               destination         
	6511  985K ACCEPT     tcp  --  *      *       127.0.0.1            127.0.0.1            tcp dpt:3306
		0     0 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:3306
	789 66433 ACCEPT     tcp  --  *      *       192.168.0.0/16       0.0.0.0/0            tcp dpt:22
		3   164 ACCEPT     tcp  --  *      *       127.0.0.0/8          0.0.0.0/0            tcp dpt:22
		0     0 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:22

# View opened ports from local net
nmap -p 3306 192.168.1.100
	Nmap scan report for 192.168.1.100
	Host is up (0.0050s latency).
	PORT     STATE    SERVICE
	3306/tcp filtered mysql
nmap -p 22 192.168.1.100
	Nmap scan report for 192.168.1.100
	Host is up (0.0026s latency).
	PORT   STATE SERVICE
	22/tcp open  ssh

# View opened ports localhost
nmap -p 3306 localhost
	Nmap scan report for localhost (127.0.0.1)
	Host is up (0.00066s latency).
	Other addresses for localhost (not scanned): ::1
	PORT     STATE SERVICE
	3306/tcp open  mysql
nmap -p 22 localhost
	Nmap scan report for localhost (127.0.0.1)
	Host is up (0.0010s latency).
	PORT   STATE SERVICE
	22/tcp open  ssh
    
# View opened ports from internet
nmap -p 22 91.90.39.86  
	Nmap scan report for 86-39-90-91.omsk.mts.mkc-omsk.ru (91.90.39.86)
	Host is up (0.0021s latency).
	PORT   STATE  SERVICE
	22/tcp closed ssh
nmap -p 3306 91.90.39.86
	Nmap scan report for 86-39-90-91.omsk.mts.mkc-omsk.ru (91.90.39.86)
	Host is up (0.0026s latency).
	PORT     STATE  SERVICE
	3306/tcp closed mysql
    
# All required ports closed from outside.

# Start SSH tunel and run MySQL Workbench
ssh -X -A -tt 91.90.39.86 -p 2222 ssh -X 192.168.1.87 mysql-workbench
# Start SSH tunel for 3306
ssh -A -L 3306:127.0.0.1:3306 -tt 91.90.39.86 -p 2222 ssh -L 3306:127.0.0.1:3306 192.168.1.87
# if MySQL is installed on GATEWAY and WORKSTATION (ports is already)
ssh -A -L 23306:127.0.0.1:13306 -tt 91.90.39.86 -p 2222 ssh -L 13306:127.0.0.1:3306 192.168.1.87

